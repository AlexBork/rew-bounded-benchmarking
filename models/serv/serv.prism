// Variant of the Care home scenario by 
// Lacerda, Parker, Hawes: Multi-Objective Policy Generation for Mobile Robots Under Probabilistic Time-Bounded Guarantees (ICAPS'17)
// models hallway navigation and water delivery in a care home
// A move can fail with probability pSlip, resulting in the robot staying in the same location
// Everything but the location is observable
//
//   --   --   --   --   --   --   --
// | 19 | 17 | 15 |  1 |  6 |  8 | 10 | 
// | 24   13   12    0    3    4    5 |
// | 20 | 18 | 16 |  2 |  7 |  9 | 11 |
//   --   --   --   --   --   --   --


pomdp

observables
n_water, wants_water6, wants_water7, wants_water11, interacted6, interacted10, interacted17, interacted18, delay, delivered_water6, delivered_water7, delivered_water11
endobservables

const double pWantsWater = 2/10;
const double pDelay = 2/10;
const double pGetWater = 1/3;
const double pSlip = 1/100; 


module robot

	l : [0..20] init 0;
	n_water : [0..2] init 0;
	wants_water6 : [0..2] init 0; // 0: don't know, 1: wants, 2: wants not
	wants_water7 : [0..2] init 0;
	wants_water11 : [0..2] init 0;
	delivered_water6 : bool init false;
	delivered_water7 : bool init false;
	delivered_water11 : bool init false;
	interacted6 : bool init false;
	interacted10 : bool init false;
	interacted17 : bool init false;
	interacted18 : bool init false;
	
	delay : bool init false;
	
	[wait_delay] delay -> (delay'=false);
	
	[north] l=0 & !delay -> (1-pSlip)*(1-pDelay) : (l'=1) + (1-pSlip)*pDelay : (l'=1) & (delay'=true) + pSlip*(1-pDelay) : (l'=0) + pSlip*pDelay : (l'=0) & (delay'=true);
	[east] l=0 & !delay -> (1-pSlip)*(1-pDelay) : (l'=3) + (1-pSlip)*pDelay : (l'=3) & (delay'=true) + pSlip*(1-pDelay) : (l'=0) + pSlip*pDelay : (l'=0) & (delay'=true);
	[south] l=0 & !delay -> (1-pSlip)*(1-pDelay) : (l'=2) + (1-pSlip)*pDelay : (l'=2) & (delay'=true) + pSlip*(1-pDelay) : (l'=0) + pSlip*pDelay : (l'=0) & (delay'=true);
	[west] l=0 & !delay -> (1-pSlip)*(1-pDelay) : (l'=12) + (1-pSlip)*pDelay : (l'=12) & (delay'=true) + pSlip*(1-pDelay) : (l'=0) + pSlip*pDelay : (l'=0) & (delay'=true);
	
	[north] l=1 & !delay -> true;
	[east] l=1 & !delay -> true;
	[south] l=1 & !delay -> (1-pSlip) : (l'=0) + pSlip : true;
	[west] l=1 & !delay -> true;

	[north] l=2 & !delay -> (1-pSlip) : (l'=0) + pSlip : true;	
	[east] l=2 & !delay -> true;
	[south] l=2 & !delay -> true;
	[west] l=2 & !delay -> true;

	[north] l=3 & !delay -> (1-pSlip) : (l'=6) + pSlip : true;
	[east] l=3 & !delay -> (1-pSlip) : (l'=4) + pSlip : true;
	[south] l=3 & !delay -> (1-pSlip) : (l'=7) + pSlip : true;
	[west] l=3 & !delay -> (1-pSlip) : (l'=0) + pSlip : true;
	
	[north] l=4 & !delay -> (1-pSlip) : (l'=8) + pSlip : true;
	[east] l=4 & !delay -> (1-pSlip) : (l'=5) + pSlip : true;
	[south] l=4 & !delay -> (1-pSlip) : (l'=9) + pSlip : true;
	[west] l=4 & !delay -> (1-pSlip) : (l'=3) + pSlip : true;

	[north] l=5 & !delay -> (1-pSlip) : (l'=10) + pSlip : true;
	[east] l=5 & !delay -> true;
	[south] l=5 & !delay -> (1-pSlip) : (l'=11) + pSlip : true;
	[west] l=5 & !delay -> (1-pSlip) : (l'=4) + pSlip : true;

	[north] l=6 & !delay -> true;
	[east] l=6 & !delay -> true;
	[south] l=6 & !delay -> (1-pSlip) : (l'=3) + pSlip : true;
	[west] l=6 & !delay -> true;

	[north] l=7 & !delay -> (1-pSlip) : (l'=3) + pSlip : true;
	[east] l=7 & !delay -> true;
	[south] l=7 & !delay -> true;
	[west] l=7 & !delay -> true;

	[north] l=8 & !delay -> true;
	[east] l=8 & !delay -> true;
	[south] l=8 & !delay -> (1-pSlip) : (l'=4) + pSlip : true;
	[west] l=8 & !delay -> true;

	[north] l=9 & !delay -> (1-pSlip) : (l'=4) + pSlip : true;
	[east] l=9 & !delay -> true;
	[south] l=9 & !delay -> true;
	[west] l=9 & !delay -> true;

	[north] l=10 & !delay -> true;
	[east] l=10 & !delay -> true;
	[south] l=10 & !delay -> (1-pSlip) : (l'=5) + pSlip : true;
	[west] l=10 & !delay -> true;

	[north] l=11 & !delay -> (1-pSlip) : (l'=5) + pSlip : true;
	[east] l=11 & !delay -> true;
	[south] l=11 & !delay -> true;
	[west] l=11 & !delay -> true;

	[north] l=12 & !delay -> (1-pSlip) : (l'=15) + pSlip : true;
	[east] l=12 & !delay -> (1-pSlip) : (l'=0) + pSlip : true;
	[south] l=12 & !delay -> (1-pSlip) : (l'=16) + pSlip : true;
	[west] l=12 & !delay -> (1-pSlip) : (l'=13) + pSlip : true;
	
	[north] l=13 & !delay -> (1-pSlip) : (l'=17) + pSlip : true;
	[east] l=13 & !delay -> (1-pSlip) : (l'=12) + pSlip : true;
	[south] l=13 & !delay -> (1-pSlip) : (l'=18) + pSlip : true;
	[west] l=13 & !delay -> (1-pSlip) : (l'=14) + pSlip : true;
	
	[north] l=14 & !delay -> (1-pSlip) : (l'=19) + pSlip : true;
	[east] l=14 & !delay -> (1-pSlip) : (l'=13) + pSlip : true;
	[south] l=14 & !delay -> (1-pSlip) : (l'=20) + pSlip : true;
	[west] l=14 & !delay -> true;
	
	[north] l=15 & !delay -> true;
	[east] l=15 & !delay -> true;
	[south] l=15 & !delay -> (1-pSlip) : (l'=12) + pSlip : true;
	[west] l=15 & !delay -> true;

	[north] l=16 & !delay -> (1-pSlip) : (l'=12) + pSlip : true;
	[east] l=16 & !delay -> true;
	[south] l=16 & !delay -> true;
	[west] l=16 & !delay -> true;
	
	[north] l=17 & !delay -> true;
	[east] l=17 & !delay -> true;
	[south] l=17 & !delay -> (1-pSlip) : (l'=13) + pSlip : true;
	[west] l=17 & !delay -> true;

	[north] l=18 & !delay -> (1-pSlip) : (l'=13) + pSlip : true;	
	[east] l=18 & !delay -> true;
	[south] l=18 & !delay -> true;
	[west] l=18 & !delay -> true;

	[north] l=19 & !delay -> true;
	[east] l=19 & !delay -> true;
	[south] l=19 & !delay -> (1-pSlip) : (l'=14) + pSlip : true;
	[west] l=19 & !delay -> true;

	[north] l=20 & !delay -> (1-pSlip) : (l'=14) + pSlip : true;
	[east] l=20 & !delay -> true;
	[south] l=20 & !delay -> true;
	[west] l=20 & !delay -> true;
	
	
	[check_water] l=6 & wants_water6=0 -> (pWantsWater) : (wants_water6'=1) + (1-pWantsWater) : (wants_water6'=2);
	[check_water] l=7 & wants_water7=0 -> (pWantsWater) : (wants_water7'=1) + (1-pWantsWater) : (wants_water7'=2);
	[check_water] l=11 & wants_water11=0 -> (pWantsWater) : (wants_water11'=1) + (1-pWantsWater) : (wants_water11'=2);
	[check_water] (l!=6 | wants_water6!=0) & (l!=7 | wants_water7!=0) & (l!=11 | wants_water11!=0) -> 1 : true;
	
	[deliver_water] l=6 & wants_water6=1 & n_water>0 -> (delivered_water6'=true) & (n_water' = n_water-1);
	[deliver_water] l=7 & wants_water7=1 & n_water>0 -> (delivered_water7'=true) & (n_water' = n_water-1);
	[deliver_water] l=11 & wants_water11=1 & n_water>0 -> (delivered_water11'=true) & (n_water' = n_water-1);
	[deliver_water] ((l!=6 | wants_water6!=1) & (l!=7 | wants_water7!=1) & (l!=11 | wants_water11!=1)) | n_water=0 -> 1 : true;

	
	[get_water] l=1 & n_water<2 & !delay -> pGetWater : (n_water'=n_water+1) + (1-pGetWater) : true;
	[get_water] (l!=1 | n_water=2 | delay)  -> 1 : true;

	
	[interact] l=6 & !interacted6 -> (interacted6'=true); 
	[interact] l=10 & !interacted10 -> (interacted10'=true); 
	[interact] l=17 & !interacted17 -> (interacted17'=true); 
	[interact] l=18 & !interacted18 -> (interacted18'=true);
	[interact] (l!=6 | interacted6) & (l!=10 | interacted10) & (l!=17 | interacted17) & (l!=18 | interacted18) -> 1 : true;
	
endmodule

rewards "time"
	[north] true : 15;
	[east] true : 15;
	[south] true : 15;
	[west] true : 15;
	[wait_delay] true : 75;
	[get_water] true : 90;
	[interact] true : 225;
	[check_water] true : 150;
	[deliver_water] true : 120;
endrewards

rewards "interaction"
	[interact] true : 10;
endrewards

label "taskdone" = n_water=0 & ((wants_water6=1 & delivered_water6) | wants_water6=2) & ((wants_water7=1 & delivered_water7) | wants_water7=2) & ((wants_water11=1 & delivered_water11) | wants_water11=2);
	